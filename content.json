{"meta":{"title":"NOT_TON","subtitle":null,"description":null,"author":"NOT_LXB","url":"http://yoursite.com","root":"/"},"pages":[{"title":"about","date":"2019-09-28T03:37:59.000Z","updated":"2019-09-28T03:38:31.342Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"layout:aboutcomments:truereward:false document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"categories","date":"2019-09-28T03:36:39.000Z","updated":"2019-09-28T03:37:34.733Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":"layout:categoriescomments:false document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"tags","date":"2019-09-28T03:35:02.000Z","updated":"2019-09-28T03:36:05.766Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":"layout:tagscomments:false document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"}],"posts":[{"title":"html_1","slug":"html-1","date":"2019-09-28T05:20:40.000Z","updated":"2019-09-28T05:21:57.315Z","comments":true,"path":"2019/09/28/html-1/","link":"","permalink":"http://yoursite.com/2019/09/28/html-1/","excerpt":"","text":"html初学(一)123456789101112131415&lt;!DOCTYPE html&gt;&lt;html lang=\"cmn-hans\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;a href=\"http://www.baidu.com\" title=\"123\"&gt;百度&lt;/a&gt; &lt;h1 title=\"this is my first page\"&gt; 网页 &lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; 在VScode中新建一个html文档 html注释(VScode中快捷键：Ctrl+”/“)1&lt;!-- zhushineirong--&gt; 元素 其他叫法：标签、标记 1&lt;a href=\"http://www.baidu.com\" title=\"123\"&gt;百度&lt;/a&gt; 整体：element(元素) 元素 = 起始标记（begin tag) + 结束标记（end tag） + 元素内容 + 元素属性 属性 = 属性名 + 属性值 属性分类： - 局部属性：某些元素特有的属性 - 全局属性：所有元素通用(例如:titile属性) 1&lt;meta charset=\"UTF-8\"&gt; 有些元素没有结束标记，这样的元素叫做：空元素 空元素的两种写法：1.charset12345678910112.```&lt;meta charset=\"UTF-8\" /&gt;```（老版本写法）## 元素的嵌套元素不能相互嵌套：```html&lt;body&gt; &lt;p&gt; &lt;/body&gt;&lt;p&gt; 父元素、子元素、祖先元素、后代元素、兄弟元素（拥有同一个父元素的两个元素） 标准的文档结构HTML:页面、HTML文档 1&lt;!DOCTYPE html&gt; 文档声明，告诉浏览器，当前文档使用的HTML标准是HTML5。（不写的话，将导致浏览器进入怪异渲染模式） 12&lt;html lang=\"en\"&gt;&lt;/html&gt; 根元素，一个页面最多有只能一个，并且该元素是所有其他元素的父元素或祖先元素 HTML5版本中没有强制要求书写该元素 lang属性：language,全局属性，表示该元素内部使用的文字是使用哪种自然语言书写而成的 123&lt;head&gt;&lt;/head&gt; 文档头，文档头内部的内容，不会显示到页面上。 1&lt;meta&gt; 文档的元元素：附加的信息 charset：指定网页内容编码 计算机中，低电压（02V) 0,高压电（25V) 1,表示2（10） 计算机中，只能存储数字 UTF-8 是 Unicode 编码的一个版本 1&lt;title&gt;Document&lt;/title&gt; 网页标题 12&lt;body&gt;&lt;/body&gt; 文档体，页面上所有参与显示的元素，都应该放到文档体当中 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-09-28T01:09:33.371Z","updated":"2019-09-28T03:29:21.947Z","comments":true,"path":"2019/09/28/hello-world/","link":"","permalink":"http://yoursite.com/2019/09/28/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]}]}